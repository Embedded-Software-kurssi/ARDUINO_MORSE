
emptysketch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000044e  000004e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080011a  0080011a  000004fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001025  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065d  00000000  00000000  000016b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000968  00000000  00000000  00001d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00002680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057d  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009a7  00000000  00000000  00002e41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000037e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 57 00 	jmp	0xae	; 0xae <__ctors_end>
   4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
   8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
   c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  40:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_16>
  44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  5c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
  64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf ef       	ldi	r28, 0xFF	; 255
  b4:	d8 e0       	ldi	r29, 0x08	; 8
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	ee e4       	ldi	r30, 0x4E	; 78
  c2:	f4 e0       	ldi	r31, 0x04	; 4
  c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x10>
  c6:	05 90       	lpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	aa 31       	cpi	r26, 0x1A	; 26
  cc:	b1 07       	cpc	r27, r17
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0xc>

000000d0 <__do_clear_bss>:
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	aa e1       	ldi	r26, 0x1A	; 26
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
  d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
  da:	a3 32       	cpi	r26, 0x23	; 35
  dc:	b2 07       	cpc	r27, r18
  de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
  e0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  e4:	0c 94 25 02 	jmp	0x44a	; 0x44a <_exit>

000000e8 <__bad_interrupt>:
  e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <_Z9bitActionc>:
	 49  //U
 };

 void bitAction(char b) {
	 if (b > 0) {
		 digitalWrite(LED_PIN, HIGH);
  ec:	61 e0       	ldi	r22, 0x01	; 1
	 35, //T
	 49  //U
 };

 void bitAction(char b) {
	 if (b > 0) {
  ee:	88 23       	and	r24, r24
  f0:	41 f0       	breq	.+16     	; 0x102 <_Z9bitActionc+0x16>
		 digitalWrite(LED_PIN, HIGH);
  f2:	8d e0       	ldi	r24, 0x0D	; 13
  f4:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
		 delay(500);
  f8:	64 ef       	ldi	r22, 0xF4	; 244
  fa:	71 e0       	ldi	r23, 0x01	; 1
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	07 c0       	rjmp	.+14     	; 0x110 <_Z9bitActionc+0x24>
		 digitalWrite(LED_PIN, LOW);
		 delay(400);
	 } else {
		digitalWrite(LED_PIN, HIGH);
 102:	8d e0       	ldi	r24, 0x0D	; 13
 104:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
		delay(200);
 108:	68 ec       	ldi	r22, 0xC8	; 200
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 54 01 	call	0x2a8	; 0x2a8 <delay>
		digitalWrite(LED_PIN, LOW);
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	8d e0       	ldi	r24, 0x0D	; 13
 118:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <digitalWrite>
		delay(400);
 11c:	60 e9       	ldi	r22, 0x90	; 144
 11e:	71 e0       	ldi	r23, 0x01	; 1
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <delay>

00000128 <_Z8showTextPKc>:
	 }
 }

 void showText(const char* text) {
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	8c 01       	movw	r16, r24
 138:	7c 01       	movw	r14, r24
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	e8 0e       	add	r14, r24
 13e:	f1 1c       	adc	r15, r1
 	int len;
 	len = sizeof(text);

 	for (int i = 0; i < len; i++) {
	 	char merkki = characters[text[i] - 65];
 140:	d8 01       	movw	r26, r16
 142:	ed 91       	ld	r30, X+
 144:	8d 01       	movw	r16, r26
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	e1 54       	subi	r30, 0x41	; 65
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	c0 81       	ld	r28, Z
 14e:	8c 2f       	mov	r24, r28
 150:	88 70       	andi	r24, 0x08	; 8
 152:	bc 2f       	mov	r27, r28
 154:	b4 70       	andi	r27, 0x04	; 4
 156:	db 2e       	mov	r13, r27
 158:	dc 2f       	mov	r29, r28
 15a:	d2 70       	andi	r29, 0x02	; 2
	 	if (merkki & BIT5) {
 15c:	c4 ff       	sbrs	r28, 4
 15e:	03 c0       	rjmp	.+6      	; 0x166 <_Z8showTextPKc+0x3e>
		 	bitAction(merkki & BIT4);
 160:	0e 94 76 00 	call	0xec	; 0xec <_Z9bitActionc>
 164:	02 c0       	rjmp	.+4      	; 0x16a <_Z8showTextPKc+0x42>
		 	bitAction(merkki & BIT3);
		 	bitAction(merkki & BIT2);
		 	bitAction(merkki & BIT1);
	 	}
	 	else if (merkki & BIT4) {
 166:	88 23       	and	r24, r24
 168:	21 f0       	breq	.+8      	; 0x172 <_Z8showTextPKc+0x4a>
		 	bitAction(merkki & BIT3);
 16a:	8d 2d       	mov	r24, r13
 16c:	0e 94 76 00 	call	0xec	; 0xec <_Z9bitActionc>
 170:	02 c0       	rjmp	.+4      	; 0x176 <_Z8showTextPKc+0x4e>
		 	bitAction(merkki & BIT2);
		 	bitAction(merkki & BIT1);
	 	}
	 	else if (merkki & BIT3) {
 172:	bb 23       	and	r27, r27
 174:	21 f0       	breq	.+8      	; 0x17e <_Z8showTextPKc+0x56>
		 	bitAction(merkki & BIT2);
 176:	8d 2f       	mov	r24, r29
 178:	0e 94 76 00 	call	0xec	; 0xec <_Z9bitActionc>
 17c:	02 c0       	rjmp	.+4      	; 0x182 <_Z8showTextPKc+0x5a>
		 	bitAction(merkki & BIT1);
	 	}
	 	else if (merkki & BIT2) {
 17e:	dd 23       	and	r29, r29
 180:	21 f0       	breq	.+8      	; 0x18a <_Z8showTextPKc+0x62>
		 	bitAction(merkki & BIT1);
 182:	8c 2f       	mov	r24, r28
 184:	81 70       	andi	r24, 0x01	; 1
 186:	0e 94 76 00 	call	0xec	; 0xec <_Z9bitActionc>

 void showText(const char* text) {
 	int len;
 	len = sizeof(text);

 	for (int i = 0; i < len; i++) {
 18a:	0e 15       	cp	r16, r14
 18c:	1f 05       	cpc	r17, r15
 18e:	c1 f6       	brne	.-80     	; 0x140 <_Z8showTextPKc+0x18>
	 	}
	 	else if (merkki & BIT2) {
		 	bitAction(merkki & BIT1);
	 	}
 	}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	df 90       	pop	r13
 19e:	08 95       	ret

000001a0 <setup>:


//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio

void setup() {
 1a0:	08 95       	ret

000001a2 <loop>:

}

void loop() {
  // put your main code here, to run repeatedly:
  showText("SOS");
 1a2:	85 e1       	ldi	r24, 0x15	; 21
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0c 94 94 00 	jmp	0x128	; 0x128 <_Z8showTextPKc>

000001aa <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 1aa:	08 95       	ret

000001ac <main>:

int main(void)
{
	init();
 1ac:	0e 94 90 01 	call	0x320	; 0x320 <init>

	initVariant();
 1b0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 1b4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 1bc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <loop>
		if (serialEventRun) serialEventRun();
 1c0:	20 97       	sbiw	r28, 0x00	; 0
 1c2:	e1 f3       	breq	.-8      	; 0x1bc <main+0x10>
 1c4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 1c8:	f9 cf       	rjmp	.-14     	; 0x1bc <main+0x10>

000001ca <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	2f 93       	push	r18
 1d6:	3f 93       	push	r19
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <timer0_millis>
 1e4:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <timer0_millis+0x1>
 1e8:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <timer0_millis+0x2>
 1ec:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <timer0_millis+0x3>
 1f0:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <__data_end>
 1f4:	23 e0       	ldi	r18, 0x03	; 3
 1f6:	23 0f       	add	r18, r19
 1f8:	2d 37       	cpi	r18, 0x7D	; 125
 1fa:	20 f4       	brcc	.+8      	; 0x204 <__vector_16+0x3a>
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	a1 1d       	adc	r26, r1
 200:	b1 1d       	adc	r27, r1
 202:	05 c0       	rjmp	.+10     	; 0x20e <__vector_16+0x44>
 204:	26 e8       	ldi	r18, 0x86	; 134
 206:	23 0f       	add	r18, r19
 208:	02 96       	adiw	r24, 0x02	; 2
 20a:	a1 1d       	adc	r26, r1
 20c:	b1 1d       	adc	r27, r1
 20e:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <__data_end>
 212:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <timer0_millis>
 216:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <timer0_millis+0x1>
 21a:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <timer0_millis+0x2>
 21e:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <timer0_millis+0x3>
 222:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <timer0_overflow_count>
 226:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <timer0_overflow_count+0x1>
 22a:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <timer0_overflow_count+0x2>
 22e:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <timer0_overflow_count+0x3>
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	a1 1d       	adc	r26, r1
 236:	b1 1d       	adc	r27, r1
 238:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <timer0_overflow_count>
 23c:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <timer0_overflow_count+0x1>
 240:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <timer0_overflow_count+0x2>
 244:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <timer0_overflow_count+0x3>
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	3f 91       	pop	r19
 252:	2f 91       	pop	r18
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <micros>:
 25e:	3f b7       	in	r19, 0x3f	; 63
 260:	f8 94       	cli
 262:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <timer0_overflow_count>
 266:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <timer0_overflow_count+0x1>
 26a:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <timer0_overflow_count+0x2>
 26e:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <timer0_overflow_count+0x3>
 272:	26 b5       	in	r18, 0x26	; 38
 274:	a8 9b       	sbis	0x15, 0	; 21
 276:	05 c0       	rjmp	.+10     	; 0x282 <micros+0x24>
 278:	2f 3f       	cpi	r18, 0xFF	; 255
 27a:	19 f0       	breq	.+6      	; 0x282 <micros+0x24>
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	a1 1d       	adc	r26, r1
 280:	b1 1d       	adc	r27, r1
 282:	3f bf       	out	0x3f, r19	; 63
 284:	ba 2f       	mov	r27, r26
 286:	a9 2f       	mov	r26, r25
 288:	98 2f       	mov	r25, r24
 28a:	88 27       	eor	r24, r24
 28c:	82 0f       	add	r24, r18
 28e:	91 1d       	adc	r25, r1
 290:	a1 1d       	adc	r26, r1
 292:	b1 1d       	adc	r27, r1
 294:	bc 01       	movw	r22, r24
 296:	cd 01       	movw	r24, r26
 298:	42 e0       	ldi	r20, 0x02	; 2
 29a:	66 0f       	add	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	88 1f       	adc	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	4a 95       	dec	r20
 2a4:	d1 f7       	brne	.-12     	; 0x29a <micros+0x3c>
 2a6:	08 95       	ret

000002a8 <delay>:
 2a8:	8f 92       	push	r8
 2aa:	9f 92       	push	r9
 2ac:	af 92       	push	r10
 2ae:	bf 92       	push	r11
 2b0:	cf 92       	push	r12
 2b2:	df 92       	push	r13
 2b4:	ef 92       	push	r14
 2b6:	ff 92       	push	r15
 2b8:	6b 01       	movw	r12, r22
 2ba:	7c 01       	movw	r14, r24
 2bc:	0e 94 2f 01 	call	0x25e	; 0x25e <micros>
 2c0:	4b 01       	movw	r8, r22
 2c2:	5c 01       	movw	r10, r24
 2c4:	c1 14       	cp	r12, r1
 2c6:	d1 04       	cpc	r13, r1
 2c8:	e1 04       	cpc	r14, r1
 2ca:	f1 04       	cpc	r15, r1
 2cc:	01 f1       	breq	.+64     	; 0x30e <delay+0x66>
 2ce:	0e 94 24 02 	call	0x448	; 0x448 <yield>
 2d2:	0e 94 2f 01 	call	0x25e	; 0x25e <micros>
 2d6:	dc 01       	movw	r26, r24
 2d8:	cb 01       	movw	r24, r22
 2da:	88 19       	sub	r24, r8
 2dc:	99 09       	sbc	r25, r9
 2de:	aa 09       	sbc	r26, r10
 2e0:	bb 09       	sbc	r27, r11
 2e2:	88 3e       	cpi	r24, 0xE8	; 232
 2e4:	93 40       	sbci	r25, 0x03	; 3
 2e6:	a1 05       	cpc	r26, r1
 2e8:	b1 05       	cpc	r27, r1
 2ea:	60 f3       	brcs	.-40     	; 0x2c4 <delay+0x1c>
 2ec:	21 e0       	ldi	r18, 0x01	; 1
 2ee:	c2 1a       	sub	r12, r18
 2f0:	d1 08       	sbc	r13, r1
 2f2:	e1 08       	sbc	r14, r1
 2f4:	f1 08       	sbc	r15, r1
 2f6:	88 ee       	ldi	r24, 0xE8	; 232
 2f8:	88 0e       	add	r8, r24
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	98 1e       	adc	r9, r24
 2fe:	a1 1c       	adc	r10, r1
 300:	b1 1c       	adc	r11, r1
 302:	c1 14       	cp	r12, r1
 304:	d1 04       	cpc	r13, r1
 306:	e1 04       	cpc	r14, r1
 308:	f1 04       	cpc	r15, r1
 30a:	19 f7       	brne	.-58     	; 0x2d2 <delay+0x2a>
 30c:	db cf       	rjmp	.-74     	; 0x2c4 <delay+0x1c>
 30e:	ff 90       	pop	r15
 310:	ef 90       	pop	r14
 312:	df 90       	pop	r13
 314:	cf 90       	pop	r12
 316:	bf 90       	pop	r11
 318:	af 90       	pop	r10
 31a:	9f 90       	pop	r9
 31c:	8f 90       	pop	r8
 31e:	08 95       	ret

00000320 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 320:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 322:	84 b5       	in	r24, 0x24	; 36
 324:	82 60       	ori	r24, 0x02	; 2
 326:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 328:	84 b5       	in	r24, 0x24	; 36
 32a:	81 60       	ori	r24, 0x01	; 1
 32c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 32e:	85 b5       	in	r24, 0x25	; 37
 330:	82 60       	ori	r24, 0x02	; 2
 332:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 334:	85 b5       	in	r24, 0x25	; 37
 336:	81 60       	ori	r24, 0x01	; 1
 338:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 33a:	ee e6       	ldi	r30, 0x6E	; 110
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	81 60       	ori	r24, 0x01	; 1
 342:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 344:	e1 e8       	ldi	r30, 0x81	; 129
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 34a:	80 81       	ld	r24, Z
 34c:	82 60       	ori	r24, 0x02	; 2
 34e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 350:	80 81       	ld	r24, Z
 352:	81 60       	ori	r24, 0x01	; 1
 354:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 356:	e0 e8       	ldi	r30, 0x80	; 128
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	81 60       	ori	r24, 0x01	; 1
 35e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 360:	e1 eb       	ldi	r30, 0xB1	; 177
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	84 60       	ori	r24, 0x04	; 4
 368:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 36a:	e0 eb       	ldi	r30, 0xB0	; 176
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	81 60       	ori	r24, 0x01	; 1
 372:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 374:	ea e7       	ldi	r30, 0x7A	; 122
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	84 60       	ori	r24, 0x04	; 4
 37c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 37e:	80 81       	ld	r24, Z
 380:	82 60       	ori	r24, 0x02	; 2
 382:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 384:	80 81       	ld	r24, Z
 386:	81 60       	ori	r24, 0x01	; 1
 388:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 38a:	80 81       	ld	r24, Z
 38c:	80 68       	ori	r24, 0x80	; 128
 38e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 390:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 394:	08 95       	ret

00000396 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
 396:	83 30       	cpi	r24, 0x03	; 3
 398:	81 f0       	breq	.+32     	; 0x3ba <turnOffPWM+0x24>
 39a:	28 f4       	brcc	.+10     	; 0x3a6 <turnOffPWM+0x10>
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	99 f0       	breq	.+38     	; 0x3c6 <turnOffPWM+0x30>
 3a0:	82 30       	cpi	r24, 0x02	; 2
 3a2:	a1 f0       	breq	.+40     	; 0x3cc <turnOffPWM+0x36>
 3a4:	08 95       	ret
 3a6:	87 30       	cpi	r24, 0x07	; 7
 3a8:	a9 f0       	breq	.+42     	; 0x3d4 <turnOffPWM+0x3e>
 3aa:	88 30       	cpi	r24, 0x08	; 8
 3ac:	b9 f0       	breq	.+46     	; 0x3dc <turnOffPWM+0x46>
 3ae:	84 30       	cpi	r24, 0x04	; 4
 3b0:	d1 f4       	brne	.+52     	; 0x3e6 <turnOffPWM+0x50>
 3b2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 3b6:	8f 7d       	andi	r24, 0xDF	; 223
 3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <turnOffPWM+0x2a>
 3ba:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 3be:	8f 77       	andi	r24, 0x7F	; 127
 3c0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 3c4:	08 95       	ret
 3c6:	84 b5       	in	r24, 0x24	; 36
 3c8:	8f 77       	andi	r24, 0x7F	; 127
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <turnOffPWM+0x3a>
 3cc:	84 b5       	in	r24, 0x24	; 36
 3ce:	8f 7d       	andi	r24, 0xDF	; 223
 3d0:	84 bd       	out	0x24, r24	; 36
 3d2:	08 95       	ret
 3d4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 3d8:	8f 77       	andi	r24, 0x7F	; 127
 3da:	03 c0       	rjmp	.+6      	; 0x3e2 <turnOffPWM+0x4c>
 3dc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 3e0:	8f 7d       	andi	r24, 0xDF	; 223
 3e2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 3e6:	08 95       	ret

000003e8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 3ee:	28 2f       	mov	r18, r24
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	f9 01       	movw	r30, r18
 3f4:	e8 59       	subi	r30, 0x98	; 152
 3f6:	ff 4f       	sbci	r31, 0xFF	; 255
 3f8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 3fa:	f9 01       	movw	r30, r18
 3fc:	e4 58       	subi	r30, 0x84	; 132
 3fe:	ff 4f       	sbci	r31, 0xFF	; 255
 400:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 402:	f9 01       	movw	r30, r18
 404:	e0 57       	subi	r30, 0x70	; 112
 406:	ff 4f       	sbci	r31, 0xFF	; 255
 408:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 40a:	cc 23       	and	r28, r28
 40c:	c9 f0       	breq	.+50     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
 40e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 410:	81 11       	cpse	r24, r1
 412:	0e 94 cb 01 	call	0x396	; 0x396 <turnOffPWM>

	out = portOutputRegister(port);
 416:	ec 2f       	mov	r30, r28
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	ee 0f       	add	r30, r30
 41c:	ff 1f       	adc	r31, r31
 41e:	ec 55       	subi	r30, 0x5C	; 92
 420:	ff 4f       	sbci	r31, 0xFF	; 255
 422:	a5 91       	lpm	r26, Z+
 424:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 426:	8f b7       	in	r24, 0x3f	; 63
	cli();
 428:	f8 94       	cli

	if (val == LOW) {
 42a:	11 11       	cpse	r17, r1
 42c:	05 c0       	rjmp	.+10     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
		*out &= ~bit;
 42e:	9c 91       	ld	r25, X
 430:	ed 2f       	mov	r30, r29
 432:	e0 95       	com	r30
 434:	e9 23       	and	r30, r25
 436:	02 c0       	rjmp	.+4      	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>
	} else {
		*out |= bit;
 438:	ec 91       	ld	r30, X
 43a:	ed 2b       	or	r30, r29
 43c:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 43e:	8f bf       	out	0x3f, r24	; 63
}
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	08 95       	ret

00000448 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 448:	08 95       	ret

0000044a <_exit>:
 44a:	f8 94       	cli

0000044c <__stop_program>:
 44c:	ff cf       	rjmp	.-2      	; 0x44c <__stop_program>
